version: '3'
services:
  api-main: 
    build: 
      context: ./api/main
      dockerfile: Dockerfile
      args:
        EXPOSED_PORT: ${API_MAIN_PORT}
        NODE_ENV: ${NODE_ENV}
    container_name: api-main
    ports:
      - ${API_MAIN_PORT}:${API_MAIN_PORT}
    volumes:
      - ./api/main:/app
      - /app/node_modules
    environment:
      PORT: ${API_MAIN_PORT}
      GATEWAY_PORT: ${GATEWAY_PORT}
      NODE_ENV: ${NODE_ENV}
      BIG_PROBLEM_EMAIL: ${BIG_PROBLEM_EMAIL}
      GMAIL_CLIENT_ID: ${GMAIL_CLIENT_ID}
      GMAIL_CLIENT_SECRET: ${GMAIL_CLIENT_SECRET}
      GMAIL_REFRESH_TOKEN: ${GMAIL_REFRESH_TOKEN}
      GMAIL_REDIRECT_URL: ${GMAIL_REDIRECT_URL}
      GMAIL_TEST_TO: ${GMAIL_TEST_TO}
      MONGO_URL: ${MONGO_URL}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      - mongo
  api-crud: 
    build: 
      context: ./api/crud
      dockerfile: Dockerfile
      args:
        EXPOSED_PORT: ${API_CRUD_PORT}
        NODE_ENV: ${NODE_ENV}
    container_name: api-crud
    ports:
      - ${API_CRUD_PORT}:${API_CRUD_PORT}
    volumes:
      - ./api/crud:/app
      - /app/node_modules
    environment:
      PORT: ${API_CRUD_PORT}
      GATEWAY_PORT: ${GATEWAY_PORT}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      - mongo
  api-users: 
    build: 
      context: ./api/users
      dockerfile: Dockerfile
      args:
        EXPOSED_PORT: ${API_USERS_PORT}
        NODE_ENV: ${NODE_ENV}
    container_name: api-users
    ports:
      - ${API_USERS_PORT}:${API_USERS_PORT}
    volumes:
      - ./api/users:/app
      - /app/node_modules
    environment:
      PORT: ${API_USERS_PORT}
      NODE_ENV: ${NODE_ENV}
      MONGO_URL: ${MONGO_URL}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      - mongo
  api-test: 
    build: 
      context: ./api/test
      dockerfile: Dockerfile
      args:
        EXPOSED_PORT: ${API_TEST_PORT}
        NODE_ENV: ${NODE_ENV}
    container_name: api-test
    ports:
      - ${API_TEST_PORT}:${API_TEST_PORT}
    volumes:
      - ./api/test:/app
      - /app/node_modules
    environment:
      PORT: ${API_TEST_PORT}
      NODE_ENV: ${NODE_ENV}
  api-static: 
    build:
      context: ./api/static
      dockerfile: Dockerfile
      args:
        EXPOSED_PORT: ${API_STATIC_PORT}
        NODE_ENV: ${NODE_ENV}
    container_name: api-static
    ports:
      - ${API_STATIC_PORT}:${API_STATIC_PORT}
    volumes:
      - ./api/static:/app
      - /app/node_modules
      - dist-volume:/app/dist
    environment:
      PORT: ${API_STATIC_PORT}
      NODE_ENV: ${NODE_ENV}
  gateway: 
    build:
      context: ./gateway
      dockerfile: Dockerfile
      args:
        EXPOSED_PORT: ${GATEWAY_PORT}
        NODE_ENV: ${NODE_ENV}
    container_name: gateway
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    volumes:
      - ./gateway:/app
      - /app/node_modules
    environment:
      PORT: ${GATEWAY_PORT}
      NODE_ENV: ${NODE_ENV}
      API_STATIC_PORT: ${API_STATIC_PORT}
      API_TEST_PORT: ${API_TEST_PORT}
      API_MAIN_PORT: ${API_MAIN_PORT}
      API_USERS_PORT: ${API_USERS_PORT}
      API_CRUD_PORT: ${API_CRUD_PORT}
    depends_on:
      - mongo
  vue-client: 
    build:
      context: ./vue-client
      dockerfile: Dockerfile
      args:
        EXPOSED_PORT: ${VUE_CLIENT_DEV_PORT}
        NODE_ENV: ${NODE_ENV}
    container_name: vue-client
    ports:
      - ${VUE_CLIENT_DEV_PORT}:${VUE_CLIENT_DEV_PORT}
    volumes:
      - ./vue-client:/app
      - /app/node_modules
      - dist-volume:/app/dist
    environment:
      PORT: ${VUE_CLIENT_DEV_PORT}
      NODE_ENV: ${NODE_ENV}
      GATEWAY_PORT: ${GATEWAY_PORT}
        
  rabbitmq:
    build: './rabbitmq'
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongo:
    image: mongo
    container_name: mongo
    restart: on-failure:5
    volumes:
      - mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}  
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}

volumes:
  rabbitmq-data:
  mongo-data:
  dist-volume: